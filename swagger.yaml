openapi: 3.0.1
info:
  title: Swagger Playliststore
  description: 'This is a sample of Playliststore.'
  contact:
    email: mishagrygor@gmail.com
  version: 1.0.0
tags:
- name: song
  description: Everything about your song
- name: playlist
  description: Access to songs in current playlist
- name: user
  description: Operations about user
paths:
  /song/{song}:
    post:
      tags:
      - song
      summary: Add a new song to the database
      operationId: addSong
      parameters:
      - name: song
        in: path
        description: Song which must be added in database
        required: true
        schema:
          type: object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Song'
          application/xml:
            schema:
              $ref: '#/components/schemas/Song'
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - songstore_auth:
        - write:songs
        - read:songs
  /song/findByName:
    get:
      tags:
      - song
      summary: Finds songs by name
      operationId: findPetsByStatus
      parameters:
      - name: name
        in: query
        description: Name values that need to be considered for filter
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'
        400:
          description: Invalid name value
          content: {}
      security:
      - songstore_auth:
        - write:songs
        - read:songs
  /song/{songId}:
    get:
      tags:
      - song
      summary: Find song by ID
      description: Returns a single song
      operationId: getsongById
      parameters:
      - name: songId
        in: path
        description: ID of song to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Song'
            application/json:
              schema:
                $ref: '#/components/schemas/Song'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Song not found
          content: {}
      security:
      - api_key: []
    delete:
      tags:
      - song
      summary: Deletes a song
      operationId: deleteSong
      parameters:
      - name: songId
        in: path
        description: Song id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Song not found
          content: {}
      security:
      - songstore_auth:
        - write:songs
        - read:songs
  /playlist:
    post:
      tags:
      - playlist
      summary: Create new playlist
      description: This can only be done by the logged in user.
      operationId: createPlaylist
      requestBody:
        description: Created playlist object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Playlist'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body

  /playlist/{playlistName}:
    delete:

      tags:
      - playlist
      summary: Delete playlist
      operationId: deletePlaylist
      parameters:
      - name: playlistName
        in: path
        description: Name of playlist to delete
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Playlist'
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
        404:
          description: Playlist not found
          content: {}
      security:
      - api_key: []

  /playlist/findByName/{playlistName}:
    get:
      tags:
      - playlist
      summary: Find playlist by name
      operationId: findPlaylist
      parameters:
      - name: playlistName
        in: path
        description: Name of playlist to find
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Playlist'
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
        404:
          description: Song not found
      security:
      - api_key: []
  /playlist/addSongInPlaylist{songName}:
    put:
      tags:
      - playlist
      summary: Add song to playlist
      operationId: addToPlaylist
      parameters:
      - name: songName
        in: path
        description: Name of song to add in playlist
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Song'
            application/json:
              schema:
                $ref: '#/components/schemas/Song'
        404:
          description: Song not found
      security:
      - api_key: []

  /playlist/removeSongByName/{songName}:
    put:
      tags:
      - playlist
      summary: Remove song from playlist
      operationId: removeFromPlaylist
      parameters:
      - name: songName
        in: path
        description: Name of song to remove playlist
        required: true
        schema:
          type: integer
          format: int64

      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Song'
            application/json:
              schema:
                $ref: '#/components/schemas/Song'
        404:
          description: Song not found
      security:
      - api_key: []


  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}

components:
  schemas:
    Playlist:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        songsId:
          type: array
          items:
            type: integer
            format: int64
        isPublic:
          type: boolean

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        playlistsId:
          type: array
          items:
            type: integer
            format: int64
      xml:
        name: User
    Song:
      required:
      - name
      - author
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: Firestarter
        author:
          type: string
          example: Samanta Jade

  securitySchemes:
    songstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/oauth/dialog
          scopes:
            write:songs: modify available songs
            read:pets: read your songs
    api_key:
      type: apiKey
      name: api_key
      in: header

